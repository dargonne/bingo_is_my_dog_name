{"version":3,"sources":["components/Title.js","components/StartButton.js","store/bingo.js","containers/BoardCell.js","containers/Board.js","page/Root.js","store/index.js","index.js"],"names":["Title","react_default","a","createElement","src","alt","Button","props","isRunning","onStart","onReset","onClick","CHANGE_GAME_STATUS","RESTART_GAME_STATUS","CHANGE_SELECTED_NUMBER","CHANGE_PLAYER_TURN","CHANGE_PLAYER_POINT","RESET_STATUS","CHANGE_RESTART_STATUS","changeGameStatus","status","type","changeSelectedNumber","value","changePlayerTurn","player","initState","nowPlayer","selectedNumber","point","1","2","isRestart","Cell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCheckEvt","bind","assertThisInitialized","_this$props","checked","alert","passTurnPlayer","finishList","_this$props2","finished","map","item","className","Component","connect","_ref","bingo","dispatch","Board","state","matrix","initMatrix","prevProps","prevState","nextProps","suffle","evtNumberSelected","row","col","findOutMatrix","setState","checkIsBingo","bingoCount","length","isBingo","setPosition","labelingBingo","bingoLtoR","bingoRtoL","SIZE","cnt","playerPointInfo","count","changePlayerPoint","position","arrInitMatrix","arrInitRow","push","arrNumbers","arrMatrix","number","arrColumn","objCell","splice","Math","floor","random","changeRestartStatus","rowIdx","colIdx","BoardCell","key","Number","info","Root","prevPros","alertWinner","player1P","player2P","clearBoard","onTerminate","Title_Title","containers_Board","StartButton_Button","combineReducers","arguments","undefined","action","objectSpread","defineProperty","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","__REDUS_DEVTOOLS_TXTENSION__","store","createStore","bingoStore","ReactDOM","render","es","page_Root","document","getElementById"],"mappings":"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","file":"static/js/main.1323eba6.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nexport const Title = () => {\r\n  return (\r\n    <span>\r\n      <img src=\"https://firebasestorage.googleapis.com/v0/b/iamdevbang.appspot.com/o/common%2Fmydogbingo.png?alt=media&token=a943d53a-2801-45ea-8510-dcd45e273b23\" alt=\"우리집 강아지는 빙고\" /> \r\n    </span>\r\n  )\r\n}","import React, { Component } from 'react'; \r\n\r\n\r\nexport const Button = (props) => {\r\n  const { isRunning, onStart, onReset } = props; \r\n\r\n  return (\r\n    isRunning\r\n    ? <button onClick={onReset}>게임 재시작</button>\r\n    : <button onClick={onStart}>게임 시작</button>\r\n  )\r\n}\r\n","// action types \r\nconst CHANGE_GAME_STATUS     = 'CHANGE_GAME_STATUS'; \r\nconst RESTART_GAME_STATUS    = 'RESTART_GAME_STATUS'; \r\nconst CHANGE_SELECTED_NUMBER = 'CHANGE_SELECTED_NUMBER'; \r\nconst CHANGE_PLAYER_TURN     = 'CHANGE_PLAYER_TURN'; \r\nconst CHANGE_PLAYER_POINT    = 'CHANGE_PLAYER_POINT'; \r\nconst RESET_STATUS           = 'RESET_STATUS'; \r\nconst CHANGE_RESTART_STATUS  = 'CHANGE_RESTART_STATUS'; \r\n\r\n// action creators \r\nexport function changeGameStatus(status) {\r\n  return {\r\n    type: CHANGE_GAME_STATUS, \r\n    status\r\n  }    \r\n}\r\n\r\nexport function restartGameStatus() {\r\n  return {\r\n    type: RESTART_GAME_STATUS \r\n  }\r\n}\r\n\r\nexport function changeRestartStatus(status) {\r\n  return {\r\n    type: CHANGE_RESTART_STATUS, \r\n    status \r\n  }\r\n}\r\n\r\nexport function changeSelectedNumber(value) {\r\n  return {\r\n    type: CHANGE_SELECTED_NUMBER, \r\n    value \r\n  }\r\n} \r\n\r\nexport function changePlayerTurn(player) {\r\n  return {\r\n    type: CHANGE_PLAYER_TURN, \r\n    player \r\n  }\r\n}\r\n\r\nexport function changePlayerPoint(info) {\r\n  return {\r\n    type: CHANGE_PLAYER_POINT,\r\n    info \r\n  }\r\n}\r\n\r\nexport function resetStatus() {\r\n  return {\r\n    type: RESET_STATUS \r\n  }\r\n}\r\n\r\n// state initialization \r\nconst initState = {\r\n  isRunning: false, \r\n  nowPlayer: 1, \r\n  selectedNumber: null, \r\n  point : {\r\n    \"1\": null, \r\n    \"2\": null, \r\n  }, \r\n  isRestart: false, \r\n}; \r\n\r\nexport default function bingo(state = initState, action) {\r\n  switch(action.type) {\r\n    case CHANGE_GAME_STATUS:\r\n      return {\r\n        ...state, \r\n        nowPlayer: 1, \r\n        isRunning: action.status,\r\n        isRestart: true,  \r\n      }; \r\n    case RESTART_GAME_STATUS: \r\n      return {\r\n        ...state, \r\n        nowPlayer: 1, \r\n        selectedNumber: [], \r\n        point: {\r\n          \"1\": null, \r\n          \"2\": null, \r\n        }, \r\n        isRunning: true, \r\n        isRestart: true, \r\n      } \r\n    case CHANGE_RESTART_STATUS: \r\n       return {\r\n         ...state, \r\n         isRestart: action.status,   \r\n       }\r\n    case CHANGE_SELECTED_NUMBER: \r\n      return {\r\n        ...state, \r\n        selectedNumber: action.value, \r\n      }; \r\n    case CHANGE_PLAYER_TURN: \r\n      return {\r\n        ...state, \r\n        nowPlayer: action.player\r\n      };\r\n    case CHANGE_PLAYER_POINT: \r\n      return {\r\n        ...state, \r\n        point: {\r\n          ...state.point, \r\n          [action.info.player]: action.info.count \r\n        }\r\n      }\r\n    case RESET_STATUS: \r\n      return initState; \r\n    default: \r\n      return state; \r\n  }\r\n}","import React, { Component } from 'react'; \r\nimport { connect } from 'react-redux'; \r\nimport { changeSelectedNumber, changePlayerTurn } from '../store/bingo'; \r\nimport './boardcell.css'; \r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n\r\n    this.handleCheckEvt = this.handleCheckEvt.bind(this); \r\n  }\r\n\r\n  handleCheckEvt() {\r\n    const { player, nowPlayer, value, checked, changeSelectedNumber, changePlayerTurn } = this.props; \r\n    \r\n    if(!value) {\r\n      return; \r\n    } \r\n\r\n    if(player !== nowPlayer) {\r\n      return alert('잘못된 차레입니다. 😭'); \r\n    }\r\n\r\n    if(checked) {\r\n      return alert('이미 이 번호를 선택했어요! 😰')\r\n    }\r\n\r\n    const passTurnPlayer = player !== 1 ? 1 : 2;  \r\n    changeSelectedNumber(value[0]); \r\n    changePlayerTurn(passTurnPlayer); \r\n  }\r\n\r\n  render() {\r\n    const { value, checked, finished} = this.props; \r\n\r\n    let finishList; \r\n\r\n    if(finished) {\r\n      finishList = finished.map((item) => <div className=\"finished\">{ finished} </div>)\r\n    }\r\n\r\n    return (\r\n      <div className=\"board-cell\" onClick={this.handleCheckEvt}>\r\n        { checked ? <div className=\"checked\">{ value }</div> : <div>{ value }</div> }\r\n        { finished ? finishList : \"\" }\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nconst cellStateToProps = ({bingo}) => {\r\n  return {\r\n    point : bingo.point, \r\n  }\r\n}\r\n\r\nconst cellDispatchToProps = dispatch => ({\r\n  changeSelectedNumber: value => dispatch(changeSelectedNumber(value)),\r\n  changePlayerTurn: player => dispatch(changePlayerTurn(player))\r\n}); \r\n\r\nexport default connect(cellStateToProps, cellDispatchToProps)(Cell); ","import React, { Component }  from 'react'; \r\nimport { connect } from 'react-redux'; \r\nimport { changeRestartStatus, changeGameStatus, changeSelectedNumber, changePlayerTurn, changePlayerPoint } from '../store/bingo'; \r\n\r\nimport Cell from './BoardCell'; \r\n\r\nimport './board.css'; \r\n\r\nclass Board extends Component {\r\n\r\n  constructor(props) {\r\n    super(props); \r\n\r\n    this.state = {\r\n      player: props.player, \r\n      matrix: null, \r\n    }; \r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    const { matrix } = this.state; \r\n  \r\n    if(!matrix) {\r\n      this.initMatrix(); \r\n    } \r\n  }\r\n  \r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const nextProps = this.props;  \r\n\r\n    if(nextProps.isRunning && nextProps.isRestart) {\r\n      this.suffle(); \r\n    }\r\n\r\n    if(nextProps.selectedNumber) {\r\n      this.evtNumberSelected(nextProps.selectedNumber); \r\n    }\r\n \r\n  }\r\n\r\n  async evtNumberSelected(value) {\r\n    const { matrix } = this.state; \r\n    const { changeSelectedNumber } = this.props; \r\n \r\n    const findOutMatrix =  await matrix.map((row) => \r\n                              row.map((col) => {\r\n                                if(col.value[0] === value) {\r\n                                  col.checked = true; \r\n                                }\r\n                                return col; \r\n                              })\r\n                           ); \r\n    \r\n    await changeSelectedNumber(null);  \r\n    \r\n    await this.setState({\r\n      player: this.props.player, \r\n      matrix: findOutMatrix, \r\n    }); \r\n\r\n    await this.checkIsBingo(); \r\n  }\r\n\r\n  checkIsBingo() {\r\n    /** 빙고여부 확인 */\r\n    const { matrix } = this.state; \r\n    const { player } = this.props; \r\n\r\n    let bingoCount = 0; \r\n    // 가로여부 검사 \r\n    for(let row=0; row < matrix.length; row++ ) {\r\n      \r\n      let isBingo = true; \r\n\r\n      for(let col=0; col < matrix[row].length; col++) {\r\n        const item = matrix[row][col]; \r\n        \r\n        if(!item.checked) {\r\n          isBingo = false; \r\n        }\r\n      }\r\n\r\n      if(isBingo) {\r\n        \r\n        bingoCount++; \r\n        const setPosition = {\r\n          row, \r\n          col: 0\r\n        }\r\n        this.labelingBingo(setPosition, bingoCount, player); \r\n      }\r\n    }\r\n\r\n    // 세로 검사 \r\n    for(let col=0; col < matrix.length; col++) {\r\n      let isBingo = true; \r\n\r\n      for(let row=0; row < matrix[col].length; row++) {\r\n        const item = matrix[row][col]; \r\n\r\n        if(!item.checked) {\r\n          isBingo = false; \r\n        }\r\n      }\r\n\r\n      if(isBingo) {\r\n        bingoCount++; \r\n        const setPosition = {\r\n          col, \r\n          row: 0\r\n        }\r\n        this.labelingBingo(setPosition, bingoCount, player); \r\n      }\r\n    }\r\n    \r\n    // 대각선 여부 검사 \r\n    let bingoLtoR = true; \r\n    let bingoRtoL = true; \r\n    const SIZE = matrix.length; \r\n\r\n    for(let cnt=0; cnt < SIZE; cnt++) {\r\n      const item = matrix[cnt][cnt]; \r\n\r\n      if(!item.checked) {\r\n        bingoLtoR = false; \r\n      }\r\n    }\r\n\r\n    if(bingoLtoR) {\r\n      bingoCount++;\r\n      const setPosition = {\r\n        row: 1, \r\n        col: 1, \r\n      }\r\n      this.labelingBingo(setPosition, bingoCount, player);  \r\n    }\r\n\r\n    for(let cnt=0; cnt < SIZE; cnt++) {\r\n      const item = matrix[cnt][(SIZE-1)-cnt]; \r\n\r\n      if(!item.checked) {\r\n        bingoRtoL = false; \r\n      }\r\n    }\r\n\r\n    if(bingoRtoL) {\r\n      bingoCount++;\r\n      const setPosition = {\r\n        row: 3, \r\n        col: 3,\r\n      }\r\n\r\n      this.labelingBingo(setPosition, bingoCount, player); \r\n    } \r\n    \r\n    const playerPointInfo = {\r\n      player: this.props.player, \r\n      count: bingoCount\r\n    }; \r\n\r\n    const { changePlayerPoint } = this.props; \r\n\r\n    changePlayerPoint(playerPointInfo); \r\n  }\r\n\r\n  labelingBingo(position, count, player) {\r\n    \r\n  }\r\n\r\n  initMatrix() {\r\n    let arrInitMatrix = []; \r\n\r\n    for(let row=0; row<5; row++) {\r\n      let arrInitRow = []; \r\n\r\n      for(let col=0; col<5; col++) {\r\n        const tmpItem = {\r\n          value: \"\", \r\n          checked: false, \r\n          finished: [], \r\n        }; \r\n\r\n        arrInitRow.push(tmpItem); \r\n      }\r\n\r\n      arrInitMatrix.push(arrInitRow); \r\n    }\r\n\r\n    this.setState({\r\n      matrix: arrInitMatrix, \r\n    }); \r\n\r\n  }\r\n\r\n  \r\n  suffle() {\r\n    const SIZE = 25; \r\n    let arrNumbers = []; \r\n    let arrMatrix = []; \r\n    \r\n    for(let number=1; number<=SIZE; number++) {\r\n      arrNumbers.push(number); \r\n    }\r\n\r\n    for(let row=0; row<5; row++) {\r\n      let arrColumn = []; \r\n      \r\n      for(let col=0; col<5; col++) {\r\n        const objCell = {\r\n          value: arrNumbers.splice(Math.floor(Math.random() * arrNumbers.length) ,1), \r\n          checked: false, \r\n          finished: [],\r\n        }; \r\n\r\n        arrColumn.push(objCell); \r\n      }\r\n\r\n      arrMatrix.push(arrColumn); \r\n    }\r\n\r\n    this.setState({\r\n      matrix: arrMatrix, \r\n    }); \r\n\r\n    this.props.changeRestartStatus(false); \r\n  }\r\n\r\n  render() {\r\n    const { player, isRunning, nowPlayer } = this.props; \r\n    const { matrix } = this.state; \r\n\r\n    return (\r\n      <div className=\"board-container\">\r\n        <div className=\"player\">\r\n          Player&nbsp;{ player }\r\n        </div>\r\n        <div className=\"board\">\r\n          {\r\n            matrix ? matrix.map((row, rowIdx) => \r\n              row.map((col, colIdx) => (\r\n                <Cell \r\n                  key={(rowIdx + colIdx) + 1}\r\n                  player={Number(player)}\r\n                  nowPlayer={nowPlayer}\r\n                  rowIdx={rowIdx}\r\n                  colIdx={colIdx} \r\n                  value={col.value}\r\n                  checked={col.checked}\r\n                  finished={col.finished}\r\n                  isRunning={isRunning}\r\n                />  \r\n              ))\r\n            ) : \"\"\r\n          }\r\n        </div>\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nconst boardStateToProps = ({ bingo }) => {\r\n  return bingo; \r\n}; \r\n\r\nconst boardDispatchToProps = dispatch => ({\r\n  changeGameStatus: status => dispatch(changeGameStatus(status)), \r\n  changeRestartStatus: status => dispatch(changeRestartStatus(status)), \r\n  changeSelectedNumber: number => dispatch(changeSelectedNumber(number)), \r\n  changePlayerTurn: player => dispatch(changePlayerTurn(player)), \r\n  changePlayerPoint: info => dispatch(changePlayerPoint(info)), \r\n}); \r\n\r\n\r\nexport default connect(boardStateToProps, boardDispatchToProps)(Board); ","import React, { Component } from 'react'; \r\nimport { connect } from 'react-redux'; \r\n\r\nimport { Title } from '../components/Title'; \r\nimport { Button } from '../components/StartButton'; \r\nimport Board from '../containers/Board'; \r\n\r\nimport './root.css'; \r\nimport { changeGameStatus, restartGameStatus, resetStatus } from '../store/bingo'; \r\n\r\nclass Root extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n  }\r\n\r\n  componentDidUpdate(prevPros, prevState) {\r\n    const nextProps = this.props; \r\n    this.alertWinner(nextProps.point); \r\n  }\r\n\r\n  async alertWinner(point) {\r\n    const player1P = point[\"1\"]; \r\n    const player2P = point[\"2\"]; \r\n\r\n    if(player1P > 4 || player2P > 4) {\r\n      if(player1P >=5 && player2P < 5) {\r\n        alert('1P가 빙고를 완성했습니다!'); \r\n      } else if(player2P >=5 && player2P < 5) {\r\n        alert('2P가 빙고를 완성했습니다!'); \r\n      }\r\n\r\n      await this.clearBoard(); \r\n    } else if ((player1P > 4) && (player2P > 4)) {\r\n      alert('무승부 입니다'); \r\n      await this.clearBoard(); \r\n    }\r\n\r\n  }\r\n\r\n  clearBoard() {\r\n    const { onTerminate } = this.props; \r\n    onTerminate(); \r\n  }\r\n  \r\n  render() {\r\n    const { isRunning, onStart, onReset } = this.props; \r\n\r\n    return (\r\n      <div className=\"root-wrapper\"> \r\n        <div className=\"title\">\r\n          <Title /> \r\n        </div>\r\n        <div className=\"board\">\r\n          <Board player=\"1\"/>\r\n          <Board player=\"2\"/>\r\n        </div>\r\n        <div className=\"button\">\r\n          <Button \r\n            isRunning={isRunning} \r\n            onStart={onStart} \r\n            onReset={onReset}   \r\n          /> \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst rootStateToProps = ({bingo}) => {\r\n  return {\r\n    isRunning: bingo.isRunning, \r\n    point: bingo.point,  \r\n  }\r\n}\r\n\r\nconst rootDispatchToProps = (dispatch) => {\r\n  return {\r\n    onStart: () => { dispatch(changeGameStatus(true))}, \r\n    onReset: () => { dispatch(restartGameStatus()) }, \r\n    onTerminate: () => { dispatch(resetStatus()) }\r\n  }\r\n}\r\n\r\nexport default connect(rootStateToProps, rootDispatchToProps)(Root); ","import { combineReducers } from 'redux'; \r\nimport bingo from './bingo'; \r\n\r\nexport default combineReducers({\r\n  bingo, \r\n}); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './page/Root'; \nimport { createStore } from 'redux'; \nimport bingoStore from './store'; \nimport { Provider } from 'react-redux'; \n\nconst devTools = \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUS_DEVTOOLS_TXTENSION__(); \nconst store = createStore(bingoStore, devTools); \n\nReactDOM.render(<Provider store={store}>\n                  <Root />\n                </Provider>,\n                document.getElementById('root'));"],"sourceRoot":""}